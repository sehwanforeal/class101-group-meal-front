{"ast":null,"code":"var _jsxFileName = \"/Users/yungchoyou/Desktop/group_meal_front/secode/group_meal_front/src/Pages/Roulette/Roulette.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Nav from \"Components/Nav\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport roulettemock from \"Data/roulettemock.js\";\nimport roulettemock2 from \"Data/roulettemock2.js\";\nimport \"./Roulette.scss\";\nimport Result from \"./Result\"; // import roulettegif from \"Img/roulette.gif\";\n\nexport class Roulette extends Component {\n  constructor() {\n    super();\n\n    this.runRoulette = () => {\n      // fetch(\"로직돌린점술판\", {\n      //   method: \"get\"\n      // })\n      //   .then(function(res) {\n      //     return res.json();\n      //   })\n      //   .then(res => {\n      //     //console.log(res.data);\n      //     let roulettemockReal = res.data;\n      //     this.setState({ isClicked: true, rouletteMock: roulettemockReal });\n      //   });\n      this.setState({\n        isClicked: true\n      });\n    };\n\n    this.sendAndReturn = () => {\n      fetch(\"수정끝난거\", {\n        method: \"post\",\n        body: JSON.stringify({\n          email: this.state.idValue,\n          password: this.state.pwValue,\n          summoner_name: this.state.nameValue\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(res => {\n        this.setState({\n          previousData: this.state.rouletteMock,\n          isClicked: false\n        });\n        alert(\"점술판이 반영되었습니다\");\n      });\n      const _this$state = this.state,\n            isAvailable = _this$state.isAvailable,\n            isOverlapped = _this$state.isOverlapped,\n            rouletteMock = _this$state.rouletteMock,\n            OverlappedName = _this$state.OverlappedName,\n            unAvailableName = _this$state.unAvailableName;\n\n      if (isAvailable && !isOverlapped) {\n        this.setState({\n          isClicked: false,\n          previousData: rouletteMock\n        });\n      } else if (isOverlapped) {\n        alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n      } else {\n        alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n      }\n    };\n\n    this.identifierMethod = (e, i, j) => {\n      const _this$state2 = this.state,\n            rouletteMock = _this$state2.rouletteMock,\n            rouletteMockList = _this$state2.rouletteMockList;\n      const value = e.target.value;\n      const rouletteMockArr = rouletteMock.slice();\n      const rl = rouletteMockList.slice();\n      rouletteMockArr[i][j] = value;\n      this.setState({\n        rouletteMock: rouletteMockArr\n      });\n      rl.indexOf(value) === -1 ? this.setState({\n        isAvailable: false,\n        unAvailableName: value\n      }) : this.setState({\n        isAvailable: true\n      });\n    };\n\n    this.state = {\n      isClicked: true,\n      rouletteMock: roulettemock.groupMeals,\n      rouletteMockList: roulettemock.groupMeals.flat(),\n      previousData: roulettemock2.groupMeals,\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\"\n    };\n  } // componentDidMount = () => {\n  //   fetch(\"이전돌림판기록\", {\n  //     method: \"get\"\n  //   })\n  //     .then(function(res) {\n  //       return res.json();\n  //     })\n  //     .then(res => {\n  //       //console.log(res.data);\n  //       let previousdata = res.data;\n  //       this.setState({ previousData: previousdata });\n  //     });\n  // };\n\n\n  render() {\n    const _this$state3 = this.state,\n          rouletteMock = _this$state3.rouletteMock,\n          isClicked = _this$state3.isClicked,\n          previousData = _this$state3.previousData;\n    return React.createElement(React.Fragment, null, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"roulette-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Result, {\n      isClicked: isClicked,\n      rouletteMock: rouletteMock,\n      onClick: this.sendAndReturn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"history-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Title, {\n      title: \"이전 점술판\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"rl-groupcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, previousData.map((el, idx) => {\n      return React.createElement(PreGroupBox, {\n        info: el,\n        index: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\nexport default Roulette;","map":{"version":3,"sources":["/Users/yungchoyou/Desktop/group_meal_front/secode/group_meal_front/src/Pages/Roulette/Roulette.js"],"names":["React","Component","Title","Nav","PreGroupBox","roulettemock","roulettemock2","Result","Roulette","constructor","runRoulette","setState","isClicked","sendAndReturn","fetch","method","body","JSON","stringify","email","state","idValue","password","pwValue","summoner_name","nameValue","then","res","json","previousData","rouletteMock","alert","isAvailable","isOverlapped","OverlappedName","unAvailableName","identifierMethod","e","i","j","rouletteMockList","value","target","rouletteMockArr","slice","rl","indexOf","groupMeals","flat","render","map","el","idx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Nav from \"Components/Nav\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport roulettemock from \"Data/roulettemock.js\";\nimport roulettemock2 from \"Data/roulettemock2.js\";\nimport \"./Roulette.scss\";\nimport Result from \"./Result\";\n// import roulettegif from \"Img/roulette.gif\";\n\nexport class Roulette extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isClicked: true,\n      rouletteMock: roulettemock.groupMeals,\n      rouletteMockList: roulettemock.groupMeals.flat(),\n      previousData: roulettemock2.groupMeals,\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\"\n    };\n  }\n\n  // componentDidMount = () => {\n  //   fetch(\"이전돌림판기록\", {\n  //     method: \"get\"\n  //   })\n  //     .then(function(res) {\n  //       return res.json();\n  //     })\n  //     .then(res => {\n  //       //console.log(res.data);\n  //       let previousdata = res.data;\n  //       this.setState({ previousData: previousdata });\n  //     });\n  // };\n\n  runRoulette = () => {\n    // fetch(\"로직돌린점술판\", {\n    //   method: \"get\"\n    // })\n    //   .then(function(res) {\n    //     return res.json();\n    //   })\n    //   .then(res => {\n    //     //console.log(res.data);\n    //     let roulettemockReal = res.data;\n    //     this.setState({ isClicked: true, rouletteMock: roulettemockReal });\n    //   });\n    this.setState({ isClicked: true });\n  };\n\n  sendAndReturn = () => {\n    fetch(\"수정끝난거\", {\n      method: \"post\",\n      body: JSON.stringify({\n        email: this.state.idValue,\n        password: this.state.pwValue,\n        summoner_name: this.state.nameValue\n      })\n    })\n      .then(function(res) {\n        return res.json();\n      })\n      .then(res => {\n        this.setState({\n          previousData: this.state.rouletteMock,\n          isClicked: false\n        });\n        alert(\"점술판이 반영되었습니다\");\n      });\n\n    const {\n      isAvailable,\n      isOverlapped,\n      rouletteMock,\n      OverlappedName,\n      unAvailableName\n    } = this.state;\n\n    if (isAvailable && !isOverlapped) {\n      this.setState({\n        isClicked: false,\n        previousData: rouletteMock\n      });\n    } else if (isOverlapped) {\n      alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n    } else {\n      alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n    }\n  };\n\n  identifierMethod = (e, i, j) => {\n    const { rouletteMock, rouletteMockList } = this.state;\n\n    const value = e.target.value;\n    const rouletteMockArr = rouletteMock.slice();\n    const rl = rouletteMockList.slice();\n\n    rouletteMockArr[i][j] = value;\n\n    this.setState({ rouletteMock: rouletteMockArr });\n\n    rl.indexOf(value) === -1\n      ? this.setState({\n          isAvailable: false,\n          unAvailableName: value\n        })\n      : this.setState({ isAvailable: true });\n  };\n\n  render() {\n    const { rouletteMock, isClicked, previousData } = this.state;\n\n    return (\n      <>\n        <Nav />\n        <div className=\"roulette-body\">\n          <Result\n            isClicked={isClicked}\n            rouletteMock={rouletteMock}\n            onClick={this.sendAndReturn}\n          />\n          <div className=\"history-container\">\n            <Title title={\"이전 점술판\"} />\n            <div className=\"rl-groupcontainer\">\n              {previousData.map((el, idx) => {\n                return <PreGroupBox info={el} index={idx} />;\n              })}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Roulette;\n"]},"metadata":{},"sourceType":"module"}