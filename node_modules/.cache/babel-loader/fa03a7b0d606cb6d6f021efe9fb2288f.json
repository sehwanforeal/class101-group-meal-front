{"ast":null,"code":"var _jsxFileName = \"/Users/yungchoyou/Desktop/group_meal_front/secode/group_meal_front/src/Pages/Roulette/Roulette.js\";\nimport React, { Component } from \"react\";\nimport \"./Roulette.scss\";\nimport Nav from \"Components/Nav\";\nimport roulettemock from \"Data/roulettemock.js\";\nimport roulettemock2 from \"Data/roulettemock2.js\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport roulettegif from \"Img/roulette.gif\";\nimport Tables from \"./Tables\";\nexport class Roulette extends Component {\n  constructor() {\n    super();\n\n    this.runRoulette = () => {\n      // fetch(\"로직돌린점술판\", {\n      //   method: \"get\"\n      // })\n      //   .then(function(res) {\n      //     return res.json();\n      //   })\n      //   .then(res => {\n      //     //console.log(res.data);\n      //     let roulettemockReal = res.data;\n      //     this.setState({ isClicked: true, rouletteMock: roulettemockReal });\n      //   });\n      this.setState({\n        isClicked: true\n      });\n    };\n\n    this.sendAndretrun = () => {\n      // fetch(\"수정끝난거\", {\n      //   method: \"post\",\n      //   body: JSON.stringify({\n      //     email: this.state.idValue,\n      //     password: this.state.pwValue,\n      //     summoner_name: this.state.nameValue\n      //   })\n      // })\n      //   .then(function(res) {\n      //     return res.json();\n      //   })\n      //   .then(res => {\n      //     this.setState({\n      //       previousData: this.state.rouletteMock,\n      //       isClicked: false\n      //     });\n      //     alert(\"점술판이 반영되었습니다\");\n      //   });\n      const _this$state = this.state,\n            isAvailable = _this$state.isAvailable,\n            isOverlapped = _this$state.isOverlapped,\n            rouletteMock = _this$state.rouletteMock,\n            OverlappedName = _this$state.OverlappedName,\n            unAvailableName = _this$state.unAvailableName;\n\n      if (isAvailable && !isOverlapped) {\n        this.setState({\n          isClicked: false,\n          previousData: rouletteMock\n        });\n      } else if (isOverlapped) {\n        alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n      } else {\n        alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n      }\n    };\n\n    this.identifierMethod = (e, i, j) => {\n      const _this$state2 = this.state,\n            rouletteMock = _this$state2.rouletteMock,\n            rouletteMockList = _this$state2.rouletteMockList;\n      const rouletteMockArr = rouletteMock.slice();\n      const rl = rouletteMockList.slice();\n      rouletteMockArr[i][j] = e.target.value;\n      this.setState({\n        rouletteMock: rouletteMockArr\n      });\n      rl.indexOf(e.target.value) === -1 ? this.setState({\n        isAvailable: false,\n        unAvailableName: e.target.value\n      }) : this.setState({\n        isAvailable: true\n      });\n    };\n\n    this.state = {\n      isClicked: true,\n      rouletteMock: roulettemock.groupMeals,\n      rouletteMockList: roulettemock.groupMeals.flat(),\n      previousData: roulettemock2.groupMeals,\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\"\n    };\n  } // componentDidMount = () => {\n  //   fetch(\"이전돌림판기록\", {\n  //     method: \"get\"\n  //   })\n  //     .then(function(res) {\n  //       return res.json();\n  //     })\n  //     .then(res => {\n  //       //console.log(res.data);\n  //       let previousdata = res.data;\n  //       this.setState({ previousData: previousdata });\n  //     });\n  // };\n\n\n  render() {\n    const _this$state3 = this.state,\n          rouletteMock = _this$state3.rouletteMock,\n          isClicked = _this$state3.isClicked,\n          previousData = _this$state3.previousData;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"roulette-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"rl-empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), isClicked ? React.createElement(\"div\", {\n      className: \"rl-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"rl-buttoncontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.sendAndretrun,\n      className: \"rl-confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"\\uD655\\uC778\")), React.createElement(\"div\", {\n      className: \"rl-inputs-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Tables, {\n      list: rouletteMock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))) : React.createElement(\"div\", {\n      className: \"rl-runsection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"runsection-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"\\uB3CC\\uB824\\uB3CC\\uB824 \\uC810\\uC220\\uD310!!!\"), React.createElement(\"img\", {\n      src: roulettegif,\n      alt: \"noimage\",\n      className: \"runsection-gif\",\n      onClick: this.runRoulette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"history-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"rl-uppercontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"rl-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"\\uC774\\uC804 \\uC810\\uC220\\uD310\")), React.createElement(\"div\", {\n      className: \"rl-groupcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, previousData.map((el, idx) => {\n      return React.createElement(PreGroupBox, {\n        info: el,\n        index: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\nexport default Roulette;","map":{"version":3,"sources":["/Users/yungchoyou/Desktop/group_meal_front/secode/group_meal_front/src/Pages/Roulette/Roulette.js"],"names":["React","Component","Nav","roulettemock","roulettemock2","PreGroupBox","roulettegif","Tables","Roulette","constructor","runRoulette","setState","isClicked","sendAndretrun","state","isAvailable","isOverlapped","rouletteMock","OverlappedName","unAvailableName","previousData","alert","identifierMethod","e","i","j","rouletteMockList","rouletteMockArr","slice","rl","target","value","indexOf","groupMeals","flat","render","map","el","idx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Roulette.scss\";\nimport Nav from \"Components/Nav\";\nimport roulettemock from \"Data/roulettemock.js\";\nimport roulettemock2 from \"Data/roulettemock2.js\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport roulettegif from \"Img/roulette.gif\";\nimport Tables from \"./Tables\";\n\nexport class Roulette extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isClicked: true,\n      rouletteMock: roulettemock.groupMeals,\n      rouletteMockList: roulettemock.groupMeals.flat(),\n      previousData: roulettemock2.groupMeals,\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\"\n    };\n  }\n\n  // componentDidMount = () => {\n  //   fetch(\"이전돌림판기록\", {\n  //     method: \"get\"\n  //   })\n  //     .then(function(res) {\n  //       return res.json();\n  //     })\n  //     .then(res => {\n  //       //console.log(res.data);\n  //       let previousdata = res.data;\n  //       this.setState({ previousData: previousdata });\n  //     });\n  // };\n  runRoulette = () => {\n    // fetch(\"로직돌린점술판\", {\n    //   method: \"get\"\n    // })\n    //   .then(function(res) {\n    //     return res.json();\n    //   })\n    //   .then(res => {\n    //     //console.log(res.data);\n    //     let roulettemockReal = res.data;\n    //     this.setState({ isClicked: true, rouletteMock: roulettemockReal });\n    //   });\n    this.setState({ isClicked: true });\n  };\n\n  sendAndretrun = () => {\n    // fetch(\"수정끝난거\", {\n    //   method: \"post\",\n    //   body: JSON.stringify({\n    //     email: this.state.idValue,\n    //     password: this.state.pwValue,\n    //     summoner_name: this.state.nameValue\n    //   })\n    // })\n    //   .then(function(res) {\n    //     return res.json();\n    //   })\n    //   .then(res => {\n    //     this.setState({\n    //       previousData: this.state.rouletteMock,\n    //       isClicked: false\n    //     });\n    //     alert(\"점술판이 반영되었습니다\");\n    //   });\n\n    const {\n      isAvailable,\n      isOverlapped,\n      rouletteMock,\n      OverlappedName,\n      unAvailableName\n    } = this.state;\n\n    if (isAvailable && !isOverlapped) {\n      this.setState({\n        isClicked: false,\n        previousData: rouletteMock\n      });\n    } else if (isOverlapped) {\n      alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n    } else {\n      alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n    }\n  };\n\n  identifierMethod = (e, i, j) => {\n    const { rouletteMock, rouletteMockList } = this.state;\n\n    const rouletteMockArr = rouletteMock.slice();\n    const rl = rouletteMockList.slice();\n\n    rouletteMockArr[i][j] = e.target.value;\n\n    this.setState({ rouletteMock: rouletteMockArr });\n\n    rl.indexOf(e.target.value) === -1\n      ? this.setState({ isAvailable: false, unAvailableName: e.target.value })\n      : this.setState({ isAvailable: true });\n  };\n\n  render() {\n    const { rouletteMock, isClicked, previousData } = this.state;\n\n    return (\n      <div>\n        <Nav />\n        <div className=\"roulette-body\">\n          <div className=\"rl-empty\"></div>\n          {isClicked ? (\n            <div className=\"rl-result\">\n              <Title />\n              <div className=\"rl-buttoncontainer\">\n                <button onClick={this.sendAndretrun} className=\"rl-confirm\">\n                  확인\n                </button>\n              </div>\n              <div className=\"rl-inputs-container\">\n                <Tables list={rouletteMock} />\n              </div>\n            </div>\n          ) : (\n            <div className=\"rl-runsection\">\n              <div className=\"runsection-title\">돌려돌려 점술판!!!</div>\n              <img\n                src={roulettegif}\n                alt=\"noimage\"\n                className=\"runsection-gif\"\n                onClick={this.runRoulette}\n              />\n            </div>\n          )}\n          <div className=\"history-container\">\n            <div className=\"rl-uppercontainer\">\n              <div className=\"rl-title\">이전 점술판</div>\n            </div>\n            <div className=\"rl-groupcontainer\">\n              {previousData.map((el, idx) => {\n                return <PreGroupBox info={el} index={idx} />;\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Roulette;\n"]},"metadata":{},"sourceType":"module"}