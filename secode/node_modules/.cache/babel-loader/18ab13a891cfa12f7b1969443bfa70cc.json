{"ast":null,"code":"var _jsxFileName = \"/Users/sehwan/secode/group_meal_front/src/Pages/Roulette/Roulette.js\";\nimport React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport Nav from \"Components/Nav\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport \"./Roulette.scss\";\nimport { client_id, client_secret, url } from \"config\"; // import roulettemock from \"Data/roulettemock.js\";\n// import roulettemock2 from \"Data/roulettemock2.js\";\n// import roulettegif from \"Img/roulette.gif\";\n\nclass Roulette extends Component {\n  constructor() {\n    super();\n\n    this.runRoulette = () => {\n      this.setState({\n        isLoading: true\n      });\n      fetch(\"\".concat(url, \"groupMeal\"), {\n        method: \"get\"\n      }).then(function (res) {\n        return res.json();\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          isClicked: true,\n          rouletteMock: res,\n          isLoading: false\n        });\n        console.log(this.state.rouletteMock);\n      });\n    };\n\n    this.sendAndReturn = () => {\n      fetch(\"\".concat(url, \"groupMeal\"), {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          groupMeals: this.state.rouletteMock\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(res => {\n        console.log(\"respons\", res);\n        alert(\"점술판이 반영되었습니다\");\n        this.setState({\n          isClicked: false // historyData: this.state.rouletteMock\n\n        });\n      }); // const {\n      //   isAvailable,\n      //   isOverlapped,\n      //   rouletteMock,\n      //   OverlappedName,\n      //   unAvailableName\n      // } = this.state;\n      // if (isAvailable && !isOverlapped) {\n      //   this.setState({\n      //     isClicked: false,\n      //     previousData: rouletteMock\n      //   });\n      // } else if (isOverlapped) {\n      //   alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n      // } else {\n      //   alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n      // }\n    };\n\n    this.state = {\n      isClicked: false,\n      rouletteMock: [],\n      // rouletteMockList: roulettemock.groupMeals.flat(),\n      historyData: [],\n      history2: [[2, 3], [4, 5]],\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\",\n      isDataCame: false,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"\".concat(url, \"groupMeal/history\"), {\n      method: \"get\"\n    }).then(function (res) {\n      return res.json();\n    }).then(res => {\n      console.log(res);\n      this.setState({\n        historyData: res,\n        isDataCame: true,\n        isLoading: false\n      });\n      console.log(this.state.historyData);\n    });\n  }\n\n  // identifierMethod = (e, i, j) => {\n  //   const { rouletteMock, rouletteMockList } = this.state;\n  //   const value = e.target.value;\n  //   const rouletteMockArr = rouletteMock.slice();\n  //   const rl = rouletteMockList.slice();\n  //   rouletteMockArr[i][j] = value;\n  //   this.setState({ rouletteMock: rouletteMockArr });\n  //   rl.indexOf(value) === -1\n  //     ? this.setState({\n  //         isAvailable: false,\n  //         unAvailableName: value\n  //       })\n  //     : this.setState({ isAvailable: true });\n  // };\n  render() {\n    const _this$state = this.state,\n          rouletteMock = _this$state.rouletteMock,\n          isClicked = _this$state.isClicked,\n          historyData = _this$state.historyData,\n          history2 = _this$state.history2,\n          isDataCame = _this$state.isDataCame,\n          isLoading = _this$state.isLoading;\n    console.log(historyData);\n    return React.createElement(React.Fragment, null, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"roulette-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Result, {\n      isClicked: isClicked,\n      rouletteMock: rouletteMock,\n      onClick: this.sendAndReturn,\n      runRoulette: this.runRoulette,\n      isLoading: isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"history-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Title, {\n      title: \"현재 점술판\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"rl-groupcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, isDataCame ? historyData[0].history.map((el, idx) => {\n      return React.createElement(PreGroupBox, {\n        info: el,\n        index: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"loading\")))));\n  }\n\n}\n\nexport default Roulette;","map":{"version":3,"sources":["/Users/sehwan/secode/group_meal_front/src/Pages/Roulette/Roulette.js"],"names":["React","Component","Title","Result","Nav","PreGroupBox","client_id","client_secret","url","Roulette","constructor","runRoulette","setState","isLoading","fetch","method","then","res","json","console","log","isClicked","rouletteMock","state","sendAndReturn","headers","body","JSON","stringify","groupMeals","alert","historyData","history2","isAvailable","unAvailableName","isOverlapped","OverlappedName","isDataCame","componentDidMount","render","history","map","el","idx"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAO,iBAAP;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,GAAnC,QAA8C,QAA9C,C,CACA;AACA;AACA;;AAEA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAC/BS,EAAAA,WAAW,GAAG;AACZ;;AADY,SAkCdC,WAlCc,GAkCA,MAAM;AAClB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACAC,MAAAA,KAAK,WAAIN,GAAJ,gBAAoB;AACvBO,QAAAA,MAAM,EAAE;AADe,OAApB,CAAL,CAGGC,IAHH,CAGQ,UAASC,GAAT,EAAc;AAClB,eAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,OALH,EAMGF,IANH,CAMQC,GAAG,IAAI;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAKL,QAAL,CAAc;AAAES,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,YAAY,EAAEL,GAAjC;AAAsCJ,UAAAA,SAAS,EAAE;AAAjD,SAAd;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAL,CAAWD,YAAvB;AACD,OAVH;AAWD,KA/Ca;;AAAA,SAiDdE,aAjDc,GAiDE,MAAM;AACpBV,MAAAA,KAAK,WAAIN,GAAJ,gBAAoB;AACvBO,QAAAA,MAAM,EAAE,MADe;AAEvBU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFc;AAKvBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWD;AADJ,SAAf;AALiB,OAApB,CAAL,CASGN,IATH,CASQ,UAASC,GAAT,EAAc;AAClB,eAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,OAXH,EAYGF,IAZH,CAYQC,GAAG,IAAI;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,GAAvB;AACAa,QAAAA,KAAK,CAAC,cAAD,CAAL;AACA,aAAKlB,QAAL,CAAc;AACZS,UAAAA,SAAS,EAAE,KADC,CAEZ;;AAFY,SAAd;AAID,OAnBH,EADoB,CAsBpB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAzFa;;AAEZ,SAAKE,KAAL,GAAa;AACXF,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGX;AACAS,MAAAA,WAAW,EAAE,EAJF;AAKXC,MAAAA,QAAQ,EAAE,CACR,CAAC,CAAD,EAAI,CAAJ,CADQ,EAER,CAAC,CAAD,EAAI,CAAJ,CAFQ,CALC;AASXC,MAAAA,WAAW,EAAE,IATF;AAUXC,MAAAA,eAAe,EAAE,EAVN;AAWXC,MAAAA,YAAY,EAAE,KAXH;AAYXC,MAAAA,cAAc,EAAE,EAZL;AAaXC,MAAAA,UAAU,EAAE,KAbD;AAcXxB,MAAAA,SAAS,EAAE;AAdA,KAAb;AAgBD;;AAEDyB,EAAAA,iBAAiB,GAAG;AAClBxB,IAAAA,KAAK,WAAIN,GAAJ,wBAA4B;AAC/BO,MAAAA,MAAM,EAAE;AADuB,KAA5B,CAAL,CAGGC,IAHH,CAGQ,UAASC,GAAT,EAAc;AAClB,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KALH,EAMGF,IANH,CAMQC,GAAG,IAAI;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,WAAKL,QAAL,CAAc;AAAEmB,QAAAA,WAAW,EAAEd,GAAf;AAAoBoB,QAAAA,UAAU,EAAE,IAAhC;AAAsCxB,QAAAA,SAAS,EAAE;AAAjD,OAAd;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAL,CAAWQ,WAAvB;AACD,KAVH;AAWD;;AA2DD;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAQ,EAAAA,MAAM,GAAG;AAAA,wBAQH,KAAKhB,KARF;AAAA,UAELD,YAFK,eAELA,YAFK;AAAA,UAGLD,SAHK,eAGLA,SAHK;AAAA,UAILU,WAJK,eAILA,WAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLK,UANK,eAMLA,UANK;AAAA,UAOLxB,SAPK,eAOLA,SAPK;AASPM,IAAAA,OAAO,CAACC,GAAR,CAAYW,WAAZ;AACA,WACE,0CACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAEV,SADb;AAEE,MAAA,YAAY,EAAEC,YAFhB;AAGE,MAAA,OAAO,EAAE,KAAKE,aAHhB;AAIE,MAAA,WAAW,EAAE,KAAKb,WAJpB;AAKE,MAAA,SAAS,EAAEE,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGwB,UAAU,GACTN,WAAW,CAAC,CAAD,CAAX,CAAeS,OAAf,CAAuBC,GAAvB,CAA2B,CAACC,EAAD,EAAKC,GAAL,KAAa;AACtC,aAAO,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAED,EAAnB;AAAuB,QAAA,KAAK,EAAEC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,CADS,GAKT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CAHF,CARF,CAFF,CADF;AA2BD;;AApJ8B;;AAuJjC,eAAelC,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Result from \"./Result\";\nimport Nav from \"Components/Nav\";\nimport PreGroupBox from \"Components/PreGroupBox\";\nimport \"./Roulette.scss\";\nimport { client_id, client_secret, url } from \"config\";\n// import roulettemock from \"Data/roulettemock.js\";\n// import roulettemock2 from \"Data/roulettemock2.js\";\n// import roulettegif from \"Img/roulette.gif\";\n\nclass Roulette extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isClicked: false,\n      rouletteMock: [],\n      // rouletteMockList: roulettemock.groupMeals.flat(),\n      historyData: [],\n      history2: [\n        [2, 3],\n        [4, 5]\n      ],\n      isAvailable: true,\n      unAvailableName: \"\",\n      isOverlapped: false,\n      OverlappedName: \"\",\n      isDataCame: false,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(`${url}groupMeal/history`, {\n      method: \"get\"\n    })\n      .then(function(res) {\n        return res.json();\n      })\n      .then(res => {\n        console.log(res);\n        this.setState({ historyData: res, isDataCame: true, isLoading: false });\n        console.log(this.state.historyData);\n      });\n  }\n\n  runRoulette = () => {\n    this.setState({ isLoading: true });\n    fetch(`${url}groupMeal`, {\n      method: \"get\"\n    })\n      .then(function(res) {\n        return res.json();\n      })\n      .then(res => {\n        console.log(res);\n        this.setState({ isClicked: true, rouletteMock: res, isLoading: false });\n        console.log(this.state.rouletteMock);\n      });\n  };\n\n  sendAndReturn = () => {\n    fetch(`${url}groupMeal`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        groupMeals: this.state.rouletteMock\n      })\n    })\n      .then(function(res) {\n        return res.json();\n      })\n      .then(res => {\n        console.log(\"respons\", res);\n        alert(\"점술판이 반영되었습니다\");\n        this.setState({\n          isClicked: false\n          // historyData: this.state.rouletteMock\n        });\n      });\n\n    // const {\n    //   isAvailable,\n    //   isOverlapped,\n    //   rouletteMock,\n    //   OverlappedName,\n    //   unAvailableName\n    // } = this.state;\n\n    // if (isAvailable && !isOverlapped) {\n    //   this.setState({\n    //     isClicked: false,\n    //     previousData: rouletteMock\n    //   });\n    // } else if (isOverlapped) {\n    //   alert(\"(\" + OverlappedName + \")가 중복되었습니다!!\");\n    // } else {\n    //   alert(\"(\" + unAvailableName + \")는 없는 이름입니다!!\");\n    // }\n  };\n\n  // identifierMethod = (e, i, j) => {\n  //   const { rouletteMock, rouletteMockList } = this.state;\n\n  //   const value = e.target.value;\n  //   const rouletteMockArr = rouletteMock.slice();\n  //   const rl = rouletteMockList.slice();\n\n  //   rouletteMockArr[i][j] = value;\n\n  //   this.setState({ rouletteMock: rouletteMockArr });\n\n  //   rl.indexOf(value) === -1\n  //     ? this.setState({\n  //         isAvailable: false,\n  //         unAvailableName: value\n  //       })\n  //     : this.setState({ isAvailable: true });\n  // };\n\n  render() {\n    const {\n      rouletteMock,\n      isClicked,\n      historyData,\n      history2,\n      isDataCame,\n      isLoading\n    } = this.state;\n    console.log(historyData);\n    return (\n      <>\n        <Nav />\n        <div className=\"roulette-body\">\n          <Result\n            isClicked={isClicked}\n            rouletteMock={rouletteMock}\n            onClick={this.sendAndReturn}\n            runRoulette={this.runRoulette}\n            isLoading={isLoading}\n          />\n          <div className=\"history-container\">\n            <Title title={\"현재 점술판\"} />\n\n            <div className=\"rl-groupcontainer\">\n              {isDataCame ? (\n                historyData[0].history.map((el, idx) => {\n                  return <PreGroupBox info={el} index={idx} />;\n                })\n              ) : (\n                <div>loading</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Roulette;\n"]},"metadata":{},"sourceType":"module"}